package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Leki;

public class LekiManager {
	
	private Connection connection;
	
	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_Leki = "CREATE TABLE Leki(id bigint GENERATED BY DEFAULT AS IDENTITY, producent varchar(255), nazwa varchar(255),cena_hurtowa REAL,pacjentId bigint)";

	private PreparedStatement addLekiStmt;
	private PreparedStatement removeLekiStmt;
	private PreparedStatement deleteAllLekisStmt;
	private PreparedStatement getAllLekisStmt;
	private PreparedStatement getLekiByIdStmt;
	private PreparedStatement getPersonJoinLeki;
	private Statement statement;
	
	public LekiManager(){
		try{
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Leki".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_Leki);
				addLekiStmt        = connection.prepareStatement("INSERT INTO Leki (id, producent, nazwa, cena_hurtowa, pacjentId) VALUES (?, ?, ?, ?, ?)");
				removeLekiStmt     = connection.prepareStatement("DELETE FROM Leki where id = ?");
				deleteAllLekisStmt = connection.prepareStatement("DELETE FROM Leki");
				getAllLekisStmt    = connection.prepareStatement("SELECT * FROM Leki");
				getLekiByIdStmt    = connection.prepareStatement("SELECT * FROM Leki where id = ?");
				getPersonJoinLeki  = connection.prepareStatement("SELECT * FROM Leki INNER JOIN Pacjent ON Leki.pacjentId=Pacjent.id");
				
				
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection(){
		return connection;
	}
	
	public int addLeki(Leki Leki) {
		int count = 0;
		try {
			addLekiStmt.setLong  (1, Leki.getId());
			addLekiStmt.setString(2, Leki.getNazwa());
			addLekiStmt.setString(3, Leki.getProducent());
			addLekiStmt.setDouble(4, Leki.getCena_hurtowa());
			addLekiStmt.setLong  (5, Leki.getPacjentId());
			count = addLekiStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public List<Leki> getAllInfo(){
		List<Leki> lekis = new ArrayList<Leki>();
		PacjentManager pm = new PacjentManager();
		try{
			ResultSet rs = getPersonJoinLeki.executeQuery();
			while(rs.next()){
				Leki l = new Leki();
				l.setId(rs.getInt("id"));
				l.setNazwa(rs.getString("nazwa"));
				l.setProducent(rs.getString("producent"));
				l.setCena_hurtowa(rs.getLong("cena_hurtowa"));
				l.setPacjent(pm.getPacjent(rs.getLong("Pacjent.id")));
				lekis.add(l);
			}
		}catch (SQLException e) {
            e.printStackTrace();
        }
		return lekis;
	}
	
	public void deleteLekis(){
		try{
			deleteAllLekisStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
    public int deleteLek(Leki Leki) {
        int count = 0;
        try {
        	removeLekiStmt.setLong(1, Leki.getId());
            count = removeLekiStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }
    
	public List<Leki> getAllLekis() {
		List<Leki> Lekis = new ArrayList<Leki>();
		try {
			ResultSet rs = getAllLekisStmt.executeQuery();
			while (rs.next()) {
				Leki p = new Leki();
				p.setId(rs.getInt("id"));
				p.setNazwa(rs.getString("nazwa"));
				p.setProducent(rs.getString("producent"));
				p.setCena_hurtowa(rs.getLong("cena_hurtowa"));
				p.setPacjentId(rs.getLong("pacjentId"));
				Lekis.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Lekis;
	}
	
	public Leki getLeki(Long id) {
		Leki p = new Leki();
		try {
			getLekiByIdStmt.setLong(1, id);
			ResultSet rs = getLekiByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setNazwa(rs.getString("nazwa"));
				p.setProducent(rs.getString("producent"));
				p.setCena_hurtowa(rs.getLong("cena_hurtowa"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return p;
	}
}


