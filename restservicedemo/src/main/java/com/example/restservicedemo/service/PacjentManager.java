package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Pacjent;

public class PacjentManager {
	
	private Connection connection;
	
	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_PACJENT = "CREATE TABLE Pacjent(id bigint GENERATED BY DEFAULT AS IDENTITY, imie varchar(255), nazwisko varchar(255),nzoz varchar(255))";

	private PreparedStatement addPacjentStmt;
	private PreparedStatement removePacjentStmt;
	private PreparedStatement deleteAllPacjentsStmt;
	private PreparedStatement getAllPacjentsStmt;
	private PreparedStatement getPacjentByIdStmt;
	
	
	private Statement statement;
	
	public PacjentManager(){
		try{
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Pacjent".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_PACJENT);
				addPacjentStmt        = connection.prepareStatement("INSERT INTO Pacjent (id, imie, nazwisko,nzoz) VALUES (?, ?, ?, ?)");
				removePacjentStmt     = connection.prepareStatement("DELETE FROM Pacjent where id = ?");
				deleteAllPacjentsStmt = connection.prepareStatement("DELETE FROM Pacjent");
				getAllPacjentsStmt    = connection.prepareStatement("SELECT id, imie, nazwisko, nzoz FROM Pacjent");
				getPacjentByIdStmt    = connection.prepareStatement("SELECT id, imie, nazwisko, nzoz FROM Pacjent where id = ?");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection(){
		return connection;
	}
	
	public int addPacjent(Pacjent pacjent) {
		int count = 0;
		try {
			addPacjentStmt.setLong(1, pacjent.getId());
			addPacjentStmt.setString(2, pacjent.getImie());
			addPacjentStmt.setString(3, pacjent.getNazwisko());
			addPacjentStmt.setString(4, pacjent.getNzoz());
			count = addPacjentStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public void deletePacjents(){
		try{
			deleteAllPacjentsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
    public int deletePacjent(Pacjent pacjent) {
        int count = 0;
        try {
        	removePacjentStmt.setLong(1, pacjent.getId());
            count = removePacjentStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }
    
	public List<Pacjent> getAllPacjents() {
		List<Pacjent> pacjents = new ArrayList<Pacjent>();
		try {
			ResultSet rs = getAllPacjentsStmt.executeQuery();
			while (rs.next()) {
				Pacjent p = new Pacjent();
				p.setId(rs.getInt("id"));
				p.setImie(rs.getString("imie"));
				p.setNazwisko(rs.getString("nazwisko"));
				p.setNzoz(rs.getString("nzoz"));
				pacjents.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pacjents;
	}
	
	public Pacjent getPacjent(Long id) {
		Pacjent p = new Pacjent();
		try {
			getPacjentByIdStmt.setLong(1, id);
			ResultSet rs = getPacjentByIdStmt.executeQuery();

			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setImie(rs.getString("imie"));
				p.setNazwisko(rs.getString("nazwisko"));
				p.setNzoz(rs.getString("nzoz"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return p;
	}
}

